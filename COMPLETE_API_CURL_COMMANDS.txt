# Complete API Testing with cURL Commands

## Base URL
- **Local Development**: `http://localhost:5000`
- **Production**: `https://your-vercel-app.vercel.app`

## Note: Replace <JWT_TOKEN> with actual token from login response

---

## 1. Health Check

### Check Server Status
```bash
curl -X GET "http://localhost:5000/health"
```

---

## 2. Authentication APIs

### Register New User
```bash
curl -X POST "http://localhost:5000/api/v1/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "first_name": "John",
    "last_name": "Doe",
    "email": "john@example.com",
    "phone_number": "+1234567890",
    "password": "password123"
  }'
```

### Login User
```bash
curl -X POST "http://localhost:5000/api/v1/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "john@example.com",
    "password": "password123"
  }'
```

### Request Password Reset
```bash
curl -X POST "http://localhost:5000/api/v1/auth/forgot-password" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "john@example.com"
  }'
```

### Reset Password
```bash
curl -X POST "http://localhost:5000/api/v1/auth/reset-password" \
  -H "Content-Type: application/json" \
  -d '{
    "token": "reset-token",
    "password": "newpassword123"
  }'
```

### Verify OTP
```bash
curl -X POST "http://localhost:5000/api/v1/auth/verify-otp" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "john@example.com",
    "otp": "123456"
  }'
```

### Update Profile
```bash
curl -X PUT "http://localhost:5000/api/v1/auth/profile" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "first_name": "John",
    "last_name": "Smith",
    "phone_number": "+1234567891"
  }'
```

---

## 3. Category APIs

### Get All Categories
```bash
curl -X GET "http://localhost:5000/api/v1/categories"
```

### Get Categories with Pagination
```bash
curl -X GET "http://localhost:5000/api/v1/categories?page=1&limit=10"
```

### Search Categories
```bash
curl -X GET "http://localhost:5000/api/v1/categories?search=food"
```

### Get Category by ID
```bash
curl -X GET "http://localhost:5000/api/v1/categories/<CATEGORY_ID>"
```

### Create Category
```bash
curl -X POST "http://localhost:5000/api/v1/categories" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Food & Beverage",
    "image": "https://example.com/image.jpg"
  }'
```

### Update Category
```bash
curl -X PUT "http://localhost:5000/api/v1/categories/<CATEGORY_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Food & Drinks",
    "image": "https://example.com/new-image.jpg"
  }'
```

### Delete Category
```bash
curl -X DELETE "http://localhost:5000/api/v1/categories/<CATEGORY_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

---

## 4. Vendor APIs

### Get All Vendors
```bash
curl -X GET "http://localhost:5000/api/v1/vendors"
```

### Get Vendors with Pagination
```bash
curl -X GET "http://localhost:5000/api/v1/vendors?page=1&limit=10"
```

### Search Vendors
```bash
curl -X GET "http://localhost:5000/api/v1/vendors?search=restaurant"
```

### Filter Active Vendors
```bash
curl -X GET "http://localhost:5000/api/v1/vendors?is_active=true"
```

### Get Popular Vendors
```bash
curl -X GET "http://localhost:5000/api/v1/vendors/popular"
```

### Get Expired Subscriptions
```bash
curl -X GET "http://localhost:5000/api/v1/vendors/expired-subscriptions"
```

### Get Vendor by ID
```bash
curl -X GET "http://localhost:5000/api/v1/vendors/<VENDOR_ID>"
```

### Create Vendor
```bash
curl -X POST "http://localhost:5000/api/v1/vendors" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Restaurant ABC",
    "image": "https://example.com/image.jpg",
    "about": "Best restaurant in town"
  }'
```

### Update Vendor
```bash
curl -X PUT "http://localhost:5000/api/v1/vendors/<VENDOR_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Restaurant ABC Updated",
    "about": "Updated description"
  }'
```

### Delete Vendor
```bash
curl -X DELETE "http://localhost:5000/api/v1/vendors/<VENDOR_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

---

## 5. Branch APIs

### Get All Branches
```bash
curl -X GET "http://localhost:5000/api/v1/branches"
```

### Get Branches with Pagination
```bash
curl -X GET "http://localhost:5000/api/v1/branches?page=1&limit=10"
```

### Search Branches
```bash
curl -X GET "http://localhost:5000/api/v1/branches?search=downtown"
```

### Filter by City
```bash
curl -X GET "http://localhost:5000/api/v1/branches?city=New York"
```

### Filter by Vendor
```bash
curl -X GET "http://localhost:5000/api/v1/branches?vendor_id=<VENDOR_ID>"
```

### Get Branch by ID
```bash
curl -X GET "http://localhost:5000/api/v1/branches/<BRANCH_ID>"
```

### Create Branch
```bash
curl -X POST "http://localhost:5000/api/v1/branches" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "vendor_id": "<VENDOR_ID>",
    "name": "Downtown Branch",
    "image": "https://example.com/image.jpg",
    "lat": 40.7128,
    "lng": -74.0060,
    "address": "123 Main St",
    "city": "New York",
    "work_time": {
      "monday": "09:00-22:00",
      "tuesday": "09:00-22:00",
      "wednesday": "09:00-22:00",
      "thursday": "09:00-22:00",
      "friday": "09:00-23:00",
      "saturday": "10:00-23:00",
      "sunday": "10:00-21:00"
    },
    "delivery_time": "30-45 minutes",
    "min_order": 25.00,
    "delivery_fee": 5.00,
    "free_delivery": false
  }'
```

### Update Branch
```bash
curl -X PUT "http://localhost:5000/api/v1/branches/<BRANCH_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Downtown Branch Updated",
    "delivery_time": "25-40 minutes",
    "min_order": 20.00
  }'
```

### Delete Branch
```bash
curl -X DELETE "http://localhost:5000/api/v1/branches/<BRANCH_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

---

## 6. Subcategory APIs

### Search Subcategories
```bash
curl -X GET "http://localhost:5000/api/v1/subcategories/search"
```

### Search with Pagination
```bash
curl -X GET "http://localhost:5000/api/v1/subcategories/search?page=1&limit=10"
```

### Search by Name
```bash
curl -X GET "http://localhost:5000/api/v1/subcategories/search?search=pizza"
```

### Filter by Branch
```bash
curl -X GET "http://localhost:5000/api/v1/subcategories/search?branch_id=<BRANCH_ID>"
```

### Filter by Category
```bash
curl -X GET "http://localhost:5000/api/v1/subcategories/search?category_id=<CATEGORY_ID>"
```

### Get Branch Subcategories
```bash
curl -X GET "http://localhost:5000/api/v1/subcategories/branches/<BRANCH_ID>"
```

### Get Specific Subcategory
```bash
curl -X GET "http://localhost:5000/api/v1/subcategories/branches/<BRANCH_ID>/<SUBCATEGORY_ID>"
```

### Create Subcategory
```bash
curl -X POST "http://localhost:5000/api/v1/subcategories/branches/<BRANCH_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "category_id": "<CATEGORY_ID>",
    "name": "Pizza",
    "image": "https://example.com/pizza.jpg",
    "has_offer": true,
    "free_delivery": false,
    "sort_order": 1
  }'
```

### Update Subcategory
```bash
curl -X PUT "http://localhost:5000/api/v1/subcategories/branches/<BRANCH_ID>/<SUBCATEGORY_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Gourmet Pizza",
    "has_offer": false,
    "sort_order": 2
  }'
```

### Delete Subcategory
```bash
curl -X DELETE "http://localhost:5000/api/v1/subcategories/branches/<BRANCH_ID>/<SUBCATEGORY_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

---

## 7. Product APIs

### Get Product by ID
```bash
curl -X GET "http://localhost:5000/api/v1/products/<PRODUCT_ID>"
```

### Get Branch Products
```bash
curl -X GET "http://localhost:5000/api/v1/products/branches/<BRANCH_ID>"
```

### Get Subcategory Products
```bash
curl -X GET "http://localhost:5000/api/v1/products/branches/<BRANCH_ID>/subcategories/<SUBCATEGORY_ID>"
```

### Create Product
```bash
curl -X POST "http://localhost:5000/api/v1/products/branches/<BRANCH_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "subcategory_id": "<SUBCATEGORY_ID>",
    "name": "Margherita Pizza",
    "description": "Classic tomato and mozzarella pizza",
    "image": "https://example.com/margherita.jpg",
    "price": 15.99,
    "is_available": true,
    "preparation_time": "20 minutes",
    "calories": 300,
    "allergens": ["gluten", "dairy"],
    "sort_order": 1
  }'
```

### Update Product
```bash
curl -X PUT "http://localhost:5000/api/v1/products/<PRODUCT_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Margherita Pizza Deluxe",
    "price": 18.99,
    "preparation_time": "25 minutes"
  }'
```

### Delete Product
```bash
curl -X DELETE "http://localhost:5000/api/v1/products/<PRODUCT_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

### Add Product Variation
```bash
curl -X POST "http://localhost:5000/api/v1/products/<PRODUCT_ID>/variations" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Large Size",
    "price_modifier": 5.00,
    "is_available": true,
    "sort_order": 1
  }'
```

### Update Product Variation
```bash
curl -X PUT "http://localhost:5000/api/v1/products/variations/<VARIATION_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "name": "Extra Large Size",
    "price_modifier": 7.00
  }'
```

### Delete Product Variation
```bash
curl -X DELETE "http://localhost:5000/api/v1/products/variations/<VARIATION_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

---

## 8. Review APIs

### Get Branch Reviews
```bash
curl -X GET "http://localhost:5000/api/v1/reviews/branches/<BRANCH_ID>"
```

### Get Branch Review Stats
```bash
curl -X GET "http://localhost:5000/api/v1/reviews/branches/<BRANCH_ID>/stats"
```

### Create Review
```bash
curl -X POST "http://localhost:5000/api/v1/reviews/branches/<BRANCH_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "user_id": "<USER_ID>",
    "rating": 5,
    "comment": "Excellent food and service!",
    "order_id": "<ORDER_ID>"
  }'
```

### Update Review
```bash
curl -X PUT "http://localhost:5000/api/v1/reviews/<REVIEW_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "rating": 4,
    "comment": "Good food, could be better"
  }'
```

### Delete Review
```bash
curl -X DELETE "http://localhost:5000/api/v1/reviews/<REVIEW_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

### Get User Reviews
```bash
curl -X GET "http://localhost:5000/api/v1/reviews/user/<USER_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

---

## 9. Offer APIs

### Get Active Offers
```bash
curl -X GET "http://localhost:5000/api/v1/offers/active"
```

### Get Expired Offers
```bash
curl -X GET "http://localhost:5000/api/v1/offers/expired"
```

### Get Offer by ID
```bash
curl -X GET "http://localhost:5000/api/v1/offers/<OFFER_ID>"
```

### Create Branch Offer
```bash
curl -X POST "http://localhost:5000/api/v1/offers/branches/<BRANCH_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "entity_type": "branch",
    "entity_id": "<BRANCH_ID>",
    "title": "20% Off All Orders",
    "description": "Get 20% discount on all orders",
    "discount_type": "percentage",
    "discount_value": 20,
    "min_order_amount": 50.00,
    "max_discount_amount": 25.00,
    "start_date": "2025-01-12T00:00:00.000Z",
    "end_date": "2025-01-31T23:59:59.000Z",
    "is_active": true
  }'
```

### Create Subcategory Offer
```bash
curl -X POST "http://localhost:5000/api/v1/offers/branches/<BRANCH_ID>/subcategories/<SUBCATEGORY_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "entity_type": "subcategory",
    "entity_id": "<SUBCATEGORY_ID>",
    "title": "Pizza Special",
    "description": "Buy 2 pizzas get 1 free",
    "discount_type": "fixed",
    "discount_value": 15.99,
    "min_order_amount": 30.00,
    "start_date": "2025-01-12T00:00:00.000Z",
    "end_date": "2025-01-31T23:59:59.000Z",
    "is_active": true
  }'
```

### Create Product Offer
```bash
curl -X POST "http://localhost:5000/api/v1/offers/products/<PRODUCT_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "entity_type": "product",
    "entity_id": "<PRODUCT_ID>",
    "title": "Margherita Pizza Deal",
    "description": "Special price for Margherita Pizza",
    "discount_type": "percentage",
    "discount_value": 15,
    "min_order_amount": 0,
    "start_date": "2025-01-12T00:00:00.000Z",
    "end_date": "2025-01-31T23:59:59.000Z",
    "is_active": true
  }'
```

### Update Offer
```bash
curl -X PUT "http://localhost:5000/api/v1/offers/<OFFER_ID>" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{
    "title": "Updated Offer Title",
    "discount_value": 25,
    "is_active": false
  }'
```

### Delete Offer
```bash
curl -X DELETE "http://localhost:5000/api/v1/offers/<OFFER_ID>" \
  -H "Authorization: Bearer <JWT_TOKEN>"
```

---

## Testing Workflow

### 1. Basic Health Check
```bash
curl -X GET "http://localhost:5000/health"
```

### 2. Register and Login
```bash
# Register
curl -X POST "http://localhost:5000/api/v1/auth/register" \
  -H "Content-Type: application/json" \
  -d '{"first_name": "Test", "last_name": "User", "email": "test@example.com", "phone_number": "+1234567890", "password": "password123"}'

# Login (save the token from response)
curl -X POST "http://localhost:5000/api/v1/auth/login" \
  -H "Content-Type: application/json" \
  -d '{"email": "test@example.com", "password": "password123"}'
```

### 3. Test Public Endpoints
```bash
# Categories
curl -X GET "http://localhost:5000/api/v1/categories"

# Vendors
curl -X GET "http://localhost:5000/api/v1/vendors"

# Branches
curl -X GET "http://localhost:5000/api/v1/branches"

# Active Offers
curl -X GET "http://localhost:5000/api/v1/offers/active"
```

### 4. Test Protected Endpoints (with JWT token)
```bash
# Create Category
curl -X POST "http://localhost:5000/api/v1/categories" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{"name": "Test Category", "image": "https://example.com/image.jpg"}'

# Create Vendor
curl -X POST "http://localhost:5000/api/v1/vendors" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer <JWT_TOKEN>" \
  -d '{"name": "Test Vendor", "about": "Test vendor description"}'
```

---

## Performance Testing

### Test Response Times
```bash
# Time the requests
time curl -X GET "http://localhost:5000/api/v1/branches"
time curl -X GET "http://localhost:5000/api/v1/vendors"
time curl -X GET "http://localhost:5000/api/v1/categories"
```

### Test with Different Page Sizes
```bash
# Small page
curl -X GET "http://localhost:5000/api/v1/branches?limit=5"

# Large page
curl -X GET "http://localhost:5000/api/v1/branches?limit=100"
```

---

## Error Testing

### Test Invalid Authentication
```bash
curl -X GET "http://localhost:5000/api/v1/categories" \
  -H "Authorization: Bearer invalid-token"
```

### Test Validation Errors
```bash
curl -X POST "http://localhost:5000/api/v1/auth/register" \
  -H "Content-Type: application/json" \
  -d '{"first_name": "", "email": "invalid-email"}'
```

### Test Not Found
```bash
curl -X GET "http://localhost:5000/api/v1/categories/invalid-id"
```

---

## Notes

1. **Replace Placeholders**: Replace `<JWT_TOKEN>`, `<CATEGORY_ID>`, `<VENDOR_ID>`, etc. with actual values from API responses.

2. **Authentication**: Most POST, PUT, DELETE operations require authentication. Get the JWT token from the login response.

3. **Response Format**: All APIs return responses in the format:
   ```json
   {
     "status": boolean,
     "data": dynamic,
     "message": string,
     "count": number
   }
   ```

4. **Error Handling**: Check the `status` field in responses. `false` indicates an error.

5. **Performance**: Some queries may take longer due to complex JOIN operations and empty database tables.

6. **Testing Order**: Start with public endpoints, then authenticate, then test protected endpoints.
